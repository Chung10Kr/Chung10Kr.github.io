---
layout: post
title:  "[코딩 테스트] 최대공약수,최소공배수 - 유클리드 호제법  -개인저장용-"
subtitle:   ""
categories: dev
tags: ct
--- 




# 최대공약수,최소공배수

[문제 설명](https://programmers.co.kr/learn/courses/30/lessons/12940?language=javascript)
# 고민

- 최대공약수는 두 자연수의 공통된 약수 중에 가장 큰 수 
- 최소공배수는 두 자연수의 공통된 배수 중에 가장 작은 수 = 두 자연수의곱/최대공약수
- 2개의 자연수를 받아 최대공약수를 받기 위해 2부터 두 자연수 중 작은 자연수까지 모두 나누어보면서 가장 큰 공약수를 구할 수 있다. -> O(N)
- [유클리드 호제법](https://ko.wikipedia.org/wiki/%EC%9C%A0%ED%81%B4%EB%A6%AC%EB%93%9C_%ED%98%B8%EC%A0%9C%EB%B2%95) -> O(logN)

# 유클리드 호제법
유클리드 호제법은 2개의 자연수 또는 정식의 최대공약수를 구하는 알고리즘의 하나이다.

호제법이란 말은 두 수가 서로 상대방 수를 나누어서 결국 원하는 수를 얻는 알고리즘을 나타낸다.

2개의 자연수(또는 정식) a, b에 대해서 a를 b로 나눈 나머지를 r이라 하면(단, a>b), a와 b의 최대공약수는 b와 r의 최대공약수와 같다. 

이 성질에 따라, b를 r로 나눈 나머지 r’를 구하고, 다시 r을 r’로 나눈 나머지를 구하는 과정을 반복하여 나머지가 0이 되었을 때 

나누는 수가 a와 b의 최대공약수이다. 이는 명시적으로 기술된 가장 오래된 알고리즘으로서도 알려져 있으며, 

기원전 300년경에 쓰인 유클리드의 《원론》 제7권, 명제 1부터 3까지에 해당한다. - 위키백과

# 예시

071과 1029의 최대공약수를 구하면,

1071은 1029로 나누어떨어지지 않기 때문에, 1071을 1029로 나눈 나머지를 구한다. ≫ 42


1029는 42로 나누어떨어지지 않기 때문에, 1029를 42로 나눈 나머지를 구한다. ≫ 21


42는 21로 나누어떨어진다.

따라서, 최대공약수는 21이다.



# 내 풀이

```javascript

function solution(num1, num2) {
    
    var val = gcd(num1, num2);
    
    return [ val , num1 * num2 / val ];
}
    
function gcd(num1 , num2){
    if(num2 == 0){
         return num1;
    }else{
        return gcd(num2, num1 % num2);
    } 
}
```
